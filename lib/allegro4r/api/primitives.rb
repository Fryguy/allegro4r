# Generated by ffi_gen. Please do not change this file by hand.

require 'ffi'

module Allegro4r; module API; module Primitives
  extend FFI::Library
  ffi_lib_flags :now
  ffi_lib "allegro_primitives"

  def self.attach_function(name, *_)
    begin; super; rescue FFI::NotFoundError => e
      (class << self; self; end).class_eval { define_method(name) { |*_| raise e } }
    end
  end

  ALLEGRO_VERTEX_CACHE_SIZE = 256

  ALLEGRO_PRIM_QUALITY = 10

  # (Not documented)
  #
  # <em>This entry is only for documentation and no real method. The FFI::Enum can be accessed via #enum_type(:allegro_prim_type).</em>
  #
  # === Options:
  # :line_list ::
  #
  # :line_strip ::
  #
  # :line_loop ::
  #
  # :triangle_list ::
  #
  # :triangle_strip ::
  #
  # :triangle_fan ::
  #
  # :point_list ::
  #
  # :num_types ::
  #
  #
  # @method _enum_allegro_prim_type_
  # @return [Symbol]
  # @scope class
  enum :allegro_prim_type, [
    :line_list, 0,
    :line_strip, 1,
    :line_loop, 2,
    :triangle_list, 3,
    :triangle_strip, 4,
    :triangle_fan, 5,
    :point_list, 6,
    :num_types, 7
  ]

  # Enum: ALLEGRO_PRIM_ATTR
  #
  # <em>This entry is only for documentation and no real method. The FFI::Enum can be accessed via #enum_type(:allegro_prim_attr).</em>
  #
  # === Options:
  # :position ::
  #
  # :color_attr ::
  #
  # :tex_coord ::
  #
  # :tex_coord_pixel ::
  #
  # :attr_num ::
  #
  #
  # @method _enum_allegro_prim_attr_
  # @return [Symbol]
  # @scope class
  enum :allegro_prim_attr, [
    :position, 1,
    :color_attr, 2,
    :tex_coord, 3,
    :tex_coord_pixel, 4,
    :attr_num, 5
  ]

  # Enum: ALLEGRO_PRIM_STORAGE
  #
  # <em>This entry is only for documentation and no real method. The FFI::Enum can be accessed via #enum_type(:allegro_prim_storage).</em>
  #
  # === Options:
  # :float_2 ::
  #
  # :float_3 ::
  #
  # :short_2 ::
  #
  #
  # @method _enum_allegro_prim_storage_
  # @return [Symbol]
  # @scope class
  enum :allegro_prim_storage, [
    :float_2, 0,
    :float_3, 1,
    :short_2, 2
  ]

  # Type: ALLEGRO_VERTEX_ELEMENT
  #
  # = Fields:
  # :attribute ::
  #   (Integer)
  # :storage ::
  #   (Integer)
  # :offset ::
  #   (Integer)
  class ALLEGROVERTEXELEMENT < FFI::Struct
    layout :attribute, :int,
           :storage, :int,
           :offset, :int
  end

  # Type: ALLEGRO_VERTEX_DECL
  class ALLEGROVERTEXDECL < FFI::Struct
    layout :dummy, :char
  end

  # Type: ALLEGRO_VERTEX
  #
  # = Fields:
  # :x ::
  #   (Float)
  # :y ::
  #   (Float)
  # :z ::
  #   (Float)
  # :u ::
  #   (Float)
  # :v ::
  #   (Float)
  # :color ::
  #   (ALLEGROCOLOR)
  class ALLEGROVERTEX < FFI::Struct
    layout :x, :float,
           :y, :float,
           :z, :float,
           :u, :float,
           :v, :float,
           :color, ALLEGROCOLOR.by_value
  end

  # (Not documented)
  #
  # @method al_get_allegro_primitives_version()
  # @return [Integer]
  # @scope class
  attach_function :al_get_allegro_primitives_version, :al_get_allegro_primitives_version, [], :uint

  # Primary Functions
  #
  # @method al_init_primitives_addon()
  # @return [Boolean]
  # @scope class
  attach_function :al_init_primitives_addon, :al_init_primitives_addon, [], :bool

  # (Not documented)
  #
  # @method al_shutdown_primitives_addon()
  # @return [nil]
  # @scope class
  attach_function :al_shutdown_primitives_addon, :al_shutdown_primitives_addon, [], :void

  # (Not documented)
  #
  # @method al_draw_prim(vtxs, decl, texture, start, end_, type)
  # @param [FFI::Pointer(*Void)] vtxs
  # @param [ALLEGROVERTEXDECL] decl
  # @param [FFI::Pointer(*ALLEGROBITMAP)] texture
  # @param [Integer] start
  # @param [Integer] end_
  # @param [Integer] type
  # @return [Integer]
  # @scope class
  attach_function :al_draw_prim, :al_draw_prim, [:pointer, ALLEGROVERTEXDECL, :pointer, :int, :int, :int], :int

  # (Not documented)
  #
  # @method al_draw_indexed_prim(vtxs, decl, texture, indices, num_vtx, type)
  # @param [FFI::Pointer(*Void)] vtxs
  # @param [ALLEGROVERTEXDECL] decl
  # @param [FFI::Pointer(*ALLEGROBITMAP)] texture
  # @param [FFI::Pointer(*Int)] indices
  # @param [Integer] num_vtx
  # @param [Integer] type
  # @return [Integer]
  # @scope class
  attach_function :al_draw_indexed_prim, :al_draw_indexed_prim, [:pointer, ALLEGROVERTEXDECL, :pointer, :pointer, :int, :int], :int

  # (Not documented)
  #
  # @method al_create_vertex_decl(elements, stride)
  # @param [ALLEGROVERTEXELEMENT] elements
  # @param [Integer] stride
  # @return [ALLEGROVERTEXDECL]
  # @scope class
  attach_function :al_create_vertex_decl, :al_create_vertex_decl, [ALLEGROVERTEXELEMENT, :int], ALLEGROVERTEXDECL

  # (Not documented)
  #
  # @method al_destroy_vertex_decl(decl)
  # @param [ALLEGROVERTEXDECL] decl
  # @return [nil]
  # @scope class
  attach_function :al_destroy_vertex_decl, :al_destroy_vertex_decl, [ALLEGROVERTEXDECL], :void

  # Custom primitives
  #
  # @method al_draw_soft_triangle(v1, v2, v3, state, init, first, step, draw)
  # @param [ALLEGROVERTEX] v1
  # @param [ALLEGROVERTEX] v2
  # @param [ALLEGROVERTEX] v3
  # @param [Integer] state
  # @param [FFI::Pointer(*)] init
  # @param [FFI::Pointer(*)] first
  # @param [FFI::Pointer(*)] step
  # @param [FFI::Pointer(*)] draw
  # @return [nil]
  # @scope class
  attach_function :al_draw_soft_triangle, :al_draw_soft_triangle, [ALLEGROVERTEX, ALLEGROVERTEX, ALLEGROVERTEX, :ulong, :pointer, :pointer, :pointer, :pointer], :void

  # (Not documented)
  #
  # @method al_draw_soft_line(v1, v2, state, first, step, draw)
  # @param [ALLEGROVERTEX] v1
  # @param [ALLEGROVERTEX] v2
  # @param [Integer] state
  # @param [FFI::Pointer(*)] first
  # @param [FFI::Pointer(*)] step
  # @param [FFI::Pointer(*)] draw
  # @return [nil]
  # @scope class
  attach_function :al_draw_soft_line, :al_draw_soft_line, [ALLEGROVERTEX, ALLEGROVERTEX, :ulong, :pointer, :pointer, :pointer], :void

  # High level primitives
  #
  # @method al_draw_line(x1, y1, x2, y2, color, thickness)
  # @param [Float] x1
  # @param [Float] y1
  # @param [Float] x2
  # @param [Float] y2
  # @param [ALLEGROCOLOR] color
  # @param [Float] thickness
  # @return [nil]
  # @scope class
  attach_function :al_draw_line, :al_draw_line, [:float, :float, :float, :float, ALLEGROCOLOR.by_value, :float], :void

  # (Not documented)
  #
  # @method al_draw_triangle(x1, y1, x2, y2, x3, y3, color, thickness)
  # @param [Float] x1
  # @param [Float] y1
  # @param [Float] x2
  # @param [Float] y2
  # @param [Float] x3
  # @param [Float] y3
  # @param [ALLEGROCOLOR] color
  # @param [Float] thickness
  # @return [nil]
  # @scope class
  attach_function :al_draw_triangle, :al_draw_triangle, [:float, :float, :float, :float, :float, :float, ALLEGROCOLOR.by_value, :float], :void

  # (Not documented)
  #
  # @method al_draw_rectangle(x1, y1, x2, y2, color, thickness)
  # @param [Float] x1
  # @param [Float] y1
  # @param [Float] x2
  # @param [Float] y2
  # @param [ALLEGROCOLOR] color
  # @param [Float] thickness
  # @return [nil]
  # @scope class
  attach_function :al_draw_rectangle, :al_draw_rectangle, [:float, :float, :float, :float, ALLEGROCOLOR.by_value, :float], :void

  # (Not documented)
  #
  # @method al_draw_rounded_rectangle(x1, y1, x2, y2, rx, ry, color, thickness)
  # @param [Float] x1
  # @param [Float] y1
  # @param [Float] x2
  # @param [Float] y2
  # @param [Float] rx
  # @param [Float] ry
  # @param [ALLEGROCOLOR] color
  # @param [Float] thickness
  # @return [nil]
  # @scope class
  attach_function :al_draw_rounded_rectangle, :al_draw_rounded_rectangle, [:float, :float, :float, :float, :float, :float, ALLEGROCOLOR.by_value, :float], :void

  # (Not documented)
  #
  # @method al_calculate_arc(dest, stride, cx, cy, rx, ry, start_theta, delta_theta, thickness, num_points)
  # @param [FFI::Pointer(*Float)] dest
  # @param [Integer] stride
  # @param [Float] cx
  # @param [Float] cy
  # @param [Float] rx
  # @param [Float] ry
  # @param [Float] start_theta
  # @param [Float] delta_theta
  # @param [Float] thickness
  # @param [Integer] num_points
  # @return [nil]
  # @scope class
  attach_function :al_calculate_arc, :al_calculate_arc, [:pointer, :int, :float, :float, :float, :float, :float, :float, :float, :int], :void

  # (Not documented)
  #
  # @method al_draw_circle(cx, cy, r, color, thickness)
  # @param [Float] cx
  # @param [Float] cy
  # @param [Float] r
  # @param [ALLEGROCOLOR] color
  # @param [Float] thickness
  # @return [nil]
  # @scope class
  attach_function :al_draw_circle, :al_draw_circle, [:float, :float, :float, ALLEGROCOLOR.by_value, :float], :void

  # (Not documented)
  #
  # @method al_draw_ellipse(cx, cy, rx, ry, color, thickness)
  # @param [Float] cx
  # @param [Float] cy
  # @param [Float] rx
  # @param [Float] ry
  # @param [ALLEGROCOLOR] color
  # @param [Float] thickness
  # @return [nil]
  # @scope class
  attach_function :al_draw_ellipse, :al_draw_ellipse, [:float, :float, :float, :float, ALLEGROCOLOR.by_value, :float], :void

  # (Not documented)
  #
  # @method al_draw_arc(cx, cy, r, start_theta, delta_theta, color, thickness)
  # @param [Float] cx
  # @param [Float] cy
  # @param [Float] r
  # @param [Float] start_theta
  # @param [Float] delta_theta
  # @param [ALLEGROCOLOR] color
  # @param [Float] thickness
  # @return [nil]
  # @scope class
  attach_function :al_draw_arc, :al_draw_arc, [:float, :float, :float, :float, :float, ALLEGROCOLOR.by_value, :float], :void

  # (Not documented)
  #
  # @method al_draw_elliptical_arc(cx, cy, rx, ry, start_theta, delta_theta, color, thickness)
  # @param [Float] cx
  # @param [Float] cy
  # @param [Float] rx
  # @param [Float] ry
  # @param [Float] start_theta
  # @param [Float] delta_theta
  # @param [ALLEGROCOLOR] color
  # @param [Float] thickness
  # @return [nil]
  # @scope class
  attach_function :al_draw_elliptical_arc, :al_draw_elliptical_arc, [:float, :float, :float, :float, :float, :float, ALLEGROCOLOR.by_value, :float], :void

  # (Not documented)
  #
  # @method al_draw_pieslice(cx, cy, r, start_theta, delta_theta, color, thickness)
  # @param [Float] cx
  # @param [Float] cy
  # @param [Float] r
  # @param [Float] start_theta
  # @param [Float] delta_theta
  # @param [ALLEGROCOLOR] color
  # @param [Float] thickness
  # @return [nil]
  # @scope class
  attach_function :al_draw_pieslice, :al_draw_pieslice, [:float, :float, :float, :float, :float, ALLEGROCOLOR.by_value, :float], :void

  # (Not documented)
  #
  # @method al_calculate_spline(dest, stride, points, thickness, num_segments)
  # @param [FFI::Pointer(*Float)] dest
  # @param [Integer] stride
  # @param [Array<Float>] points
  # @param [Float] thickness
  # @param [Integer] num_segments
  # @return [nil]
  # @scope class
  attach_function :al_calculate_spline, :al_calculate_spline, [:pointer, :int, :pointer, :float, :int], :void

  # (Not documented)
  #
  # @method al_draw_spline(points, color, thickness)
  # @param [Array<Float>] points
  # @param [ALLEGROCOLOR] color
  # @param [Float] thickness
  # @return [nil]
  # @scope class
  attach_function :al_draw_spline, :al_draw_spline, [:pointer, ALLEGROCOLOR.by_value, :float], :void

  # (Not documented)
  #
  # @method al_calculate_ribbon(dest, dest_stride, points, points_stride, thickness, num_segments)
  # @param [FFI::Pointer(*Float)] dest
  # @param [Integer] dest_stride
  # @param [FFI::Pointer(*Float)] points
  # @param [Integer] points_stride
  # @param [Float] thickness
  # @param [Integer] num_segments
  # @return [nil]
  # @scope class
  attach_function :al_calculate_ribbon, :al_calculate_ribbon, [:pointer, :int, :pointer, :int, :float, :int], :void

  # (Not documented)
  #
  # @method al_draw_ribbon(points, points_stride, color, thickness, num_segments)
  # @param [FFI::Pointer(*Float)] points
  # @param [Integer] points_stride
  # @param [ALLEGROCOLOR] color
  # @param [Float] thickness
  # @param [Integer] num_segments
  # @return [nil]
  # @scope class
  attach_function :al_draw_ribbon, :al_draw_ribbon, [:pointer, :int, ALLEGROCOLOR.by_value, :float, :int], :void

  # (Not documented)
  #
  # @method al_draw_filled_triangle(x1, y1, x2, y2, x3, y3, color)
  # @param [Float] x1
  # @param [Float] y1
  # @param [Float] x2
  # @param [Float] y2
  # @param [Float] x3
  # @param [Float] y3
  # @param [ALLEGROCOLOR] color
  # @return [nil]
  # @scope class
  attach_function :al_draw_filled_triangle, :al_draw_filled_triangle, [:float, :float, :float, :float, :float, :float, ALLEGROCOLOR.by_value], :void

  # (Not documented)
  #
  # @method al_draw_filled_rectangle(x1, y1, x2, y2, color)
  # @param [Float] x1
  # @param [Float] y1
  # @param [Float] x2
  # @param [Float] y2
  # @param [ALLEGROCOLOR] color
  # @return [nil]
  # @scope class
  attach_function :al_draw_filled_rectangle, :al_draw_filled_rectangle, [:float, :float, :float, :float, ALLEGROCOLOR.by_value], :void

  # (Not documented)
  #
  # @method al_draw_filled_ellipse(cx, cy, rx, ry, color)
  # @param [Float] cx
  # @param [Float] cy
  # @param [Float] rx
  # @param [Float] ry
  # @param [ALLEGROCOLOR] color
  # @return [nil]
  # @scope class
  attach_function :al_draw_filled_ellipse, :al_draw_filled_ellipse, [:float, :float, :float, :float, ALLEGROCOLOR.by_value], :void

  # (Not documented)
  #
  # @method al_draw_filled_circle(cx, cy, r, color)
  # @param [Float] cx
  # @param [Float] cy
  # @param [Float] r
  # @param [ALLEGROCOLOR] color
  # @return [nil]
  # @scope class
  attach_function :al_draw_filled_circle, :al_draw_filled_circle, [:float, :float, :float, ALLEGROCOLOR.by_value], :void

  # (Not documented)
  #
  # @method al_draw_filled_pieslice(cx, cy, r, start_theta, delta_theta, color)
  # @param [Float] cx
  # @param [Float] cy
  # @param [Float] r
  # @param [Float] start_theta
  # @param [Float] delta_theta
  # @param [ALLEGROCOLOR] color
  # @return [nil]
  # @scope class
  attach_function :al_draw_filled_pieslice, :al_draw_filled_pieslice, [:float, :float, :float, :float, :float, ALLEGROCOLOR.by_value], :void

  # (Not documented)
  #
  # @method al_draw_filled_rounded_rectangle(x1, y1, x2, y2, rx, ry, color)
  # @param [Float] x1
  # @param [Float] y1
  # @param [Float] x2
  # @param [Float] y2
  # @param [Float] rx
  # @param [Float] ry
  # @param [ALLEGROCOLOR] color
  # @return [nil]
  # @scope class
  attach_function :al_draw_filled_rounded_rectangle, :al_draw_filled_rounded_rectangle, [:float, :float, :float, :float, :float, :float, ALLEGROCOLOR.by_value], :void

end; end; end