# Generated by ffi_gen. Please do not change this file by hand.

require 'ffi'

module Allegro4r; module API; module Font
  extend FFI::Library
  ffi_lib_flags :now
  ffi_lib "allegro_font.5.0"

  def self.attach_function(name, *_)
    begin; super; rescue FFI::NotFoundError => e
      (class << self; self; end).class_eval { define_method(name) { |*_| raise e } }
    end
  end

  # (Not documented)
  #
  # = Fields:
  # :data ::
  #   (FFI::Pointer(*Void))
  # :height ::
  #   (Integer)
  # :vtable ::
  #   (FFI::Pointer(*ALLEGROFONTVTABLE))
  class ALLEGROFONT < FFI::Struct
    layout :data, :pointer,
           :height, :int,
           :vtable, :pointer
  end

  # text- and font-related stuff
  #
  # = Fields:
  # :font_height ::
  #   (FFI::Pointer(*))
  # :font_ascent ::
  #   (FFI::Pointer(*))
  # :font_descent ::
  #   (FFI::Pointer(*))
  # :char_length ::
  #   (FFI::Pointer(*))
  # :text_length ::
  #   (FFI::Pointer(*))
  # :render_char ::
  #   (FFI::Pointer(*))
  # :render ::
  #   (FFI::Pointer(*))
  # :destroy ::
  #   (FFI::Pointer(*))
  # :get_text_dimensions ::
  #   (FFI::Pointer(*))
  class ALLEGROFONTVTABLE < FFI::Struct
    layout :font_height, :pointer,
           :font_ascent, :pointer,
           :font_descent, :pointer,
           :char_length, :pointer,
           :text_length, :pointer,
           :render_char, :pointer,
           :render, :pointer,
           :destroy, :pointer,
           :get_text_dimensions, :pointer
  end

  # (Not documented)
  #
  # @method al_register_font_loader(ext, load)
  # @param [String] ext
  # @param [FFI::Pointer(*)] load
  # @return [Boolean]
  # @scope class
  attach_function :al_register_font_loader, :al_register_font_loader, [:string, :pointer], :bool

  # (Not documented)
  #
  # @method al_load_bitmap_font(filename)
  # @param [String] filename
  # @return [ALLEGROFONT]
  # @scope class
  attach_function :al_load_bitmap_font, :al_load_bitmap_font, [:string], ALLEGROFONT

  # (Not documented)
  #
  # @method al_load_font(filename, size, flags)
  # @param [String] filename
  # @param [Integer] size
  # @param [Integer] flags
  # @return [ALLEGROFONT]
  # @scope class
  attach_function :al_load_font, :al_load_font, [:string, :int, :int], ALLEGROFONT

  # (Not documented)
  #
  # @method al_grab_font_from_bitmap(bmp, n, ranges)
  # @param [FFI::Pointer(*ALLEGROBITMAP)] bmp
  # @param [Integer] n
  # @param [FFI::Pointer(*Int)] ranges
  # @return [ALLEGROFONT]
  # @scope class
  attach_function :al_grab_font_from_bitmap, :al_grab_font_from_bitmap, [:pointer, :int, :pointer], ALLEGROFONT

  # (Not documented)
  #
  # @method al_create_builtin_font()
  # @return [ALLEGROFONT]
  # @scope class
  attach_function :al_create_builtin_font, :al_create_builtin_font, [], ALLEGROFONT

  # (Not documented)
  #
  # @method al_draw_ustr(font, color, x, y, flags, ustr)
  # @param [ALLEGROFONT] font
  # @param [ALLEGROCOLOR] color
  # @param [Float] x
  # @param [Float] y
  # @param [Integer] flags
  # @param [FFI::Pointer(*ALLEGROUSTR)] ustr
  # @return [nil]
  # @scope class
  attach_function :al_draw_ustr, :al_draw_ustr, [ALLEGROFONT, ALLEGROCOLOR.by_value, :float, :float, :int, :pointer], :void

  # (Not documented)
  #
  # @method al_draw_text(font, color, x, y, flags, text)
  # @param [ALLEGROFONT] font
  # @param [ALLEGROCOLOR] color
  # @param [Float] x
  # @param [Float] y
  # @param [Integer] flags
  # @param [String] text
  # @return [nil]
  # @scope class
  attach_function :al_draw_text, :al_draw_text, [ALLEGROFONT, ALLEGROCOLOR.by_value, :float, :float, :int, :string], :void

  # (Not documented)
  #
  # @method al_draw_justified_text(font, color, x1, x2, y, diff, flags, text)
  # @param [ALLEGROFONT] font
  # @param [ALLEGROCOLOR] color
  # @param [Float] x1
  # @param [Float] x2
  # @param [Float] y
  # @param [Float] diff
  # @param [Integer] flags
  # @param [String] text
  # @return [nil]
  # @scope class
  attach_function :al_draw_justified_text, :al_draw_justified_text, [ALLEGROFONT, ALLEGROCOLOR.by_value, :float, :float, :float, :float, :int, :string], :void

  # (Not documented)
  #
  # @method al_draw_justified_ustr(font, color, x1, x2, y, diff, flags, text)
  # @param [ALLEGROFONT] font
  # @param [ALLEGROCOLOR] color
  # @param [Float] x1
  # @param [Float] x2
  # @param [Float] y
  # @param [Float] diff
  # @param [Integer] flags
  # @param [FFI::Pointer(*ALLEGROUSTR)] text
  # @return [nil]
  # @scope class
  attach_function :al_draw_justified_ustr, :al_draw_justified_ustr, [ALLEGROFONT, ALLEGROCOLOR.by_value, :float, :float, :float, :float, :int, :pointer], :void

  # (Not documented)
  #
  # @method al_draw_textf(font, color, x, y, flags, format)
  # @param [ALLEGROFONT] font
  # @param [ALLEGROCOLOR] color
  # @param [Float] x
  # @param [Float] y
  # @param [Integer] flags
  # @param [String] format
  # @return [nil]
  # @scope class
  attach_function :al_draw_textf, :al_draw_textf, [ALLEGROFONT, ALLEGROCOLOR.by_value, :float, :float, :int, :string], :void

  # (Not documented)
  #
  # @method al_draw_justified_textf(font, color, x1, x2, y, diff, flags, format)
  # @param [ALLEGROFONT] font
  # @param [ALLEGROCOLOR] color
  # @param [Float] x1
  # @param [Float] x2
  # @param [Float] y
  # @param [Float] diff
  # @param [Integer] flags
  # @param [String] format
  # @return [nil]
  # @scope class
  attach_function :al_draw_justified_textf, :al_draw_justified_textf, [ALLEGROFONT, ALLEGROCOLOR.by_value, :float, :float, :float, :float, :int, :string], :void

  # (Not documented)
  #
  # @method al_get_text_width(f, str)
  # @param [ALLEGROFONT] f
  # @param [String] str
  # @return [Integer]
  # @scope class
  attach_function :al_get_text_width, :al_get_text_width, [ALLEGROFONT, :string], :int

  # (Not documented)
  #
  # @method al_get_ustr_width(f, ustr)
  # @param [ALLEGROFONT] f
  # @param [FFI::Pointer(*ALLEGROUSTR)] ustr
  # @return [Integer]
  # @scope class
  attach_function :al_get_ustr_width, :al_get_ustr_width, [ALLEGROFONT, :pointer], :int

  # (Not documented)
  #
  # @method al_get_font_line_height(f)
  # @param [ALLEGROFONT] f
  # @return [Integer]
  # @scope class
  attach_function :al_get_font_line_height, :al_get_font_line_height, [ALLEGROFONT], :int

  # (Not documented)
  #
  # @method al_get_font_ascent(f)
  # @param [ALLEGROFONT] f
  # @return [Integer]
  # @scope class
  attach_function :al_get_font_ascent, :al_get_font_ascent, [ALLEGROFONT], :int

  # (Not documented)
  #
  # @method al_get_font_descent(f)
  # @param [ALLEGROFONT] f
  # @return [Integer]
  # @scope class
  attach_function :al_get_font_descent, :al_get_font_descent, [ALLEGROFONT], :int

  # (Not documented)
  #
  # @method al_destroy_font(f)
  # @param [ALLEGROFONT] f
  # @return [nil]
  # @scope class
  attach_function :al_destroy_font, :al_destroy_font, [ALLEGROFONT], :void

  # (Not documented)
  #
  # @method al_get_ustr_dimensions(f, text, bbx, bby, bbw, bbh)
  # @param [ALLEGROFONT] f
  # @param [FFI::Pointer(*ALLEGROUSTR)] text
  # @param [FFI::Pointer(*Int)] bbx
  # @param [FFI::Pointer(*Int)] bby
  # @param [FFI::Pointer(*Int)] bbw
  # @param [FFI::Pointer(*Int)] bbh
  # @return [nil]
  # @scope class
  attach_function :al_get_ustr_dimensions, :al_get_ustr_dimensions, [ALLEGROFONT, :pointer, :pointer, :pointer, :pointer, :pointer], :void

  # (Not documented)
  #
  # @method al_get_text_dimensions(f, text, bbx, bby, bbw, bbh)
  # @param [ALLEGROFONT] f
  # @param [String] text
  # @param [FFI::Pointer(*Int)] bbx
  # @param [FFI::Pointer(*Int)] bby
  # @param [FFI::Pointer(*Int)] bbw
  # @param [FFI::Pointer(*Int)] bbh
  # @return [nil]
  # @scope class
  attach_function :al_get_text_dimensions, :al_get_text_dimensions, [ALLEGROFONT, :string, :pointer, :pointer, :pointer, :pointer], :void

  # (Not documented)
  #
  # @method al_init_font_addon()
  # @return [nil]
  # @scope class
  attach_function :al_init_font_addon, :al_init_font_addon, [], :void

  # (Not documented)
  #
  # @method al_shutdown_font_addon()
  # @return [nil]
  # @scope class
  attach_function :al_shutdown_font_addon, :al_shutdown_font_addon, [], :void

  # (Not documented)
  #
  # @method al_get_allegro_font_version()
  # @return [Integer]
  # @scope class
  attach_function :al_get_allegro_font_version, :al_get_allegro_font_version, [], :uint

end; end; end